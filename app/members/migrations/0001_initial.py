# Generated by Django 2.1.2 on 2019-02-11 07:13

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0009_alter_user_last_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Player',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='선수 이름')),
                ('playin_time', models.PositiveSmallIntegerField(default=0, verbose_name='출장 시간')),
                ('FGP', models.FloatField(default=0, verbose_name='야투 성공률')),
                ('T3PP', models.FloatField(default=0, verbose_name='3점 야투 성공률')),
                ('FTP', models.FloatField(default=0, verbose_name='자유투 성공률')),
                ('PPG', models.FloatField(default=0, verbose_name='게임 평균 득점')),
                ('RPG', models.FloatField(default=0, verbose_name='게임 평균 리바운드')),
                ('APG', models.FloatField(default=0, verbose_name='게임 평균 어시스트')),
                ('BPG', models.FloatField(default=0, verbose_name='게임 평균 블락')),
                ('player_back_number', models.PositiveSmallIntegerField(default=0, verbose_name='선수 등 번호')),
                ('player_position', models.CharField(max_length=5, verbose_name='선수 포지션')),
                ('player_first_name', models.CharField(max_length=50, verbose_name='선수 이름')),
                ('player_last_name', models.CharField(max_length=50, verbose_name='선수 성씨')),
                ('player_height', models.PositiveSmallIntegerField(default=0, verbose_name='선수 키')),
                ('player_weight', models.PositiveSmallIntegerField(default=0, verbose_name='선수 무게')),
                ('player_born', models.CharField(max_length=50, verbose_name='선수 생년월일')),
                ('player_hometown', models.CharField(max_length=50, verbose_name='선수 고향')),
                ('player_nba_debut', models.PositiveSmallIntegerField(default=0, verbose_name='데뷔 년도')),
                ('player_image', models.ImageField(blank=True, default=True, null=True, upload_to='', verbose_name='선수 사진')),
            ],
        ),
        migrations.CreateModel(
            name='Team',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='팀 이름')),
                ('team_image', models.ImageField(blank=True, default=True, null=True, upload_to='', verbose_name='팀 사진')),
            ],
        ),
        migrations.AddField(
            model_name='player',
            name='team',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='members.Team'),
        ),
    ]
